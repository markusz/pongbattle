<%- include('head_html'); %>
<%- include('nav_html'); %>
<style>
  .canvasWrapper {
    float: right;
  }
</style>
<div class="container">
  <h1>Create your contestant</h1>
  <form action="/contestant/<%= id %>" method="post">
    <input type="hidden" id="submitCode" name="code">
    <div class="form-group">
      <label for="name">KI Name</label>
      <input type="text" class="form-control" id="name" name="name" placeholder="The Super Paddle" value="<%= contestant.name %>">
    </div>
    <div class="form-group">
      <label for="personName">Eigener Name</label>
      <input type="text" class="form-control" id="personName" name="personName" placeholder="Erik Ringertz" value="<%= contestant.personName %>">
    </div>
    <div class="form-group">
      <label for="personEmail">E-Mail-Adresse</label>
      <input type="email" class="form-control" id="personEmail" name="personEmail" placeholder="erik.ringertz@netlight.com" value="<%= contestant.personEmail %>">
    </div>
    <div class="form-group">
      <label for="personProgram">Studiengang</label>
      <input type="text" class="form-control" id="personProgram" name="personProgram" placeholder="e.g. Informatik" value="<%= contestant.personProgram %>">
    </div>
    <div class="form-group">
      <label for="personSemester">Semester</label>
      <input type="number" class="form-control" id="personSemester" name="personSemester" placeholder="" value="<%= contestant.personSemester %>">
    </div>
    <div class="form-group">
      <label for="code">Code</label>
      <p>This where you can unleash the power of your own contestant. You may write code in here. What you are writing is JavaScript. You have to create the body of a function that returns a number. This number will instruct your paddle to which direction it should move.</p>
      <div class="canvasWrapper"><canvas id="game"></canvas></div>
      <div id="editor" style="width: 600px; height: 250px;"><%= contestant.code %></div>
      <div class="alert alert-danger codeAlert" role="alert" style="display: none;">Your code could not be validated!</div>
      <button type="submit" class="btn btn-default btnSubmit">Save contestant</button>
      <h2>The code</h2>
      <p>Your code will need to return a simple object as shown above. Some properties will control how your paddle looks like while the most important movePaddle function controls how your paddle behaves.</p>
      <h3>Height and Speed</h3>
      <p>With these two parameters you can create a tradeoff between how tall your paddle should be compared to how fast it will move. In total you are allowed to spend 100 points on these two values.</p>
      <h3>Color</h3>
      <p>Choose a nice <a href="http://www.color-hex.com/" target="blank">hex color</a> for your paddle.</p>
      <h2>movePaddle-Function</h2>
      <p>The most important one. Basically you may code what you want here but you will need to return a number value based on certain input parameters.</p>
      <h3>
        Return Value
      </h3>
      <ul><strong>returning 0: </strong> tells your paddle to <strong>stay at the current position</strong></ul>
      <ul><strong>returning -1: </strong> tells your paddle to move <strong>up</strong></ul>
      <ul><strong>returning 1: </strong> tells your paddle to move <strong>down</strong></ul>
      <h3>
        Input Values
      </h3>
<pre>
<strong>dt</strong> the number of seconds (including fractional seconds) that has elapsed since your function has last been called. Your paddle will move by the fraction of speed of this number within this step.
</pre>
<pre>
paddleInfo = {
  x: x coordinate of the paddle,
  y: y coordinate of the paddle,
  minY: upper boundary to where the paddle can move,
  maxY: lower boundary to where the paddle can move,
  height: height of the paddle,
  width: width of the paddle
};
</pre>
<pre>
<strong>ballInfo</strong> = {
  x: current x coordinate of the ball
  y: current y coordinate of the ball
  radius: radius of the ball
  minX: minimum x of the ball
  maxX: max x of the ball
  minY: min y of the ball
  maxY: max y of the ball
  dx: movement speed per second (see dt) of the ball in x direction
  dy: movement speed per second (see dt) of the ball in y direction
  speed: general  speed of the ball
};
</pre>
<pre>
<strong>gameInfo</strong> = {
  ballAccel: general ball acclereration
  ballRadius: general ball radius
  width: width of the game field
  height: height of the game field
};
</pre>
    </div>
  </form>
  <script>
    function validateCode() {
      var codeValid = false;
      var code = editor.getValue();
      try {
        var obj = (new Function(code))();
        var result = obj.movePaddle(0.1, testPaddleInfo, testBallInfo, testGameInfo);
        if (!isNumber(result)) {
          return false;
        }
        if (!isNumber(obj.height)) {
          return false;
        }
        if (!isNumber(obj.speed)) {
          return false;
        }
        if (obj.height + obj.speed > 100) {
          return false;
        }
        if (!_.isString(obj.color) || !obj.color.match(/^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/)) {
          return false;
        }
      }
      catch(err) {
        return false;
      }
      return true;
    }
    var testGameInfo = JSON.parse('{"ballAccel":8,"ballRadius":5,"width":640,"height":480}');
    var testBallInfo = JSON.parse('{"x":283.9331280000011,"y":381.7914879999998,"radius":5,"minX":5,"maxX":635,"minY":17,"maxY":463,"dx":-174.43599999999924,"dy":-174.43599999999924,"speed":157.5}');
    var testPaddleInfo = JSON.parse('{"x":0,"y":408,"minY":12,"maxY":408,"height":60,"width":12}');
    function isNumber(n) {
      return !isNaN(parseFloat(n)) && isFinite(n);
    }
    $('form').on('submit', function() {
      var codeValid = validateCode();
      if (codeValid) {
        $("#submitCode").val(editor.getValue());
      }
      return codeValid;
    });
  </script>
  <h2>Contestant Examples</h2>
  <p>To get you going we have compiled some examples that you should use to see how a contestant can behave.</p>
  <h3>The "Move Up"</h3>
  <p>A paddle the can only go up.</p>
<pre>
return 1;
</pre>
  <h3>The "Move Down"</h3>
  <p>A paddle the is a real downer.</p>
<pre>
return -11;
</pre>
  <h3>The "Move Random"</h3>
  <p>A pretty indecisive paddle</p>
<pre>
return Math.random()-0.5;
</pre>
  <h3>The "Ball Mover"</h3>
  <p>Always keeping up with the important guy.</p>
<pre>
return ballInfo.y-paddleInfo.y;
</pre>
  <h3>Your own</h3>
  <p>Think of more complex ones. What can you build? How can you anticipate where the ball will hit your paddle. And remember the ball will move faster and faster.</p>
</div>
<script src="https://cdnjs.cloudflare.com/ajax/libs/ace/1.1.9/ace.js" type="text/javascript" charset="utf-8"></script>
<script>
  Game.ready(function() {
    console.log('game ready');
  });
  var editor = ace.edit("editor");
  editor.getSession().setMode("ace/mode/javascript");
  function debounce(func, wait, immediate) {
    var timeout;
    return function() {
      var context = this, args = arguments;
      var later = function() {
        timeout = null;
        if (!immediate) func.apply(context, args);
      };
      var callNow = immediate && !timeout;
      clearTimeout(timeout);
      timeout = setTimeout(later, wait);
      if (callNow) func.apply(context, args);
    };
  };
  var pong;
  function update() {
    if (pong) {
      pong.runner.stop();
      delete pong;
    }
    var valid = validateCode();
    $(".codeAlert").toggle(!valid);
    if (valid) {
      pong = Game.start('game', Pong, {
        sound:       true,
        stats:       false,
        footprints:  false,
        predictions: false,
        scale: 0.5,
        ai1: (new Function(editor.getValue()))(),
        ai2: (new Function(editor.getValue()))(),
        onLoad: function(game) {
          game.start(0);
        },
        onWin: function(winningPlayer, scoreLeft, scoreRight) {
        }
      });
    }
  }
  editor.on('change', debounce(update, 1000));
  setTimeout(update, 1000);
</script>
<%- include('footer_html'); %>